generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_token     String? @db.Text
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  username      String    @unique
  password      String?   
  image         String?
  role          Role      @default(CLIENT)
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  admin         Admin?
  client        Client?
  mentor        Mentor?
  messages Message[] @relation("MessageSender")
}

model Client {
  id                 String              @id @default(cuid())
  userId             String              @unique
  fullName           String
  major              String?
  interests          String[]
  hobbies            String[]
  dreamJob           String?
  currentStatus      String?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  careerAssessments  CareerAssessment[]
  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  mentorRelations    ClientMentor[]
  consultations      Consultation[]
  eventRegistrations EventRegistration[]
  receivedRecommendations MentorRecommendation[]
  notifications Notification[]
}

model Mentor {
  id              String             @id @default(cuid())
  userId          String             @unique
  fullName        String
  phoneNumber     String
  education       String
  maritalStatus   String?
  company         String
  jobRole         String
  motivation      String?
  status          MentorStatus       @default(ACTIVE)
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  clientRelations ClientMentor[]
  consultations   Consultation[]
  availableSlots  ConsultationSlot[]
  user            User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  notifications Notification[]
  expertise          MentorExpertise[]
  recommendations    MentorRecommendation[]
}

model Event {
 id            String              @id @default(cuid())
 title         String
 description   String              @db.Text    // Tambahkan @db.Text untuk text panjang
 bannerUrl     String
 location      String
 date          DateTime
 url           String?
 adminId       String
 createdAt     DateTime            @default(now())
 updatedAt     DateTime            @updatedAt
 admin         Admin               @relation(fields: [adminId], references: [id], onDelete: Cascade)  // Tambahkan onDelete: Cascade
 registrations EventRegistration[]
  notifications Notification[]

 @@index([adminId])  // Tambahkan index untuk foreign key
}

model Admin {
 id        String   @id @default(cuid())
 userId    String   @unique
 fullName  String
 createdAt DateTime @default(now())
 updatedAt DateTime @updatedAt
 user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 events    Event[]

 @@index([userId])  // Tambahkan index untuk foreign key
}

model Notification {
  id        String   @id @default(cuid())
  title     String
  message   String
  type      String   // 'EVENT' | 'OTHER'
  read      Boolean  @default(false)
  mentorId  String
  clientId  String?  // Tambahkan field clientId
  eventId   String?
  mentor    Mentor   @relation(fields: [mentorId], references: [id])
  client    Client?  @relation(fields: [clientId], references: [id]) // Perbaiki relasi
  event     Event?   @relation(fields: [eventId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([mentorId])
  @@index([clientId])
  @@index([eventId])
}

model EventRegistration {
  id        String   @id @default(cuid())
  eventId   String
  clientId  String
  createdAt DateTime @default(now())
  client    Client   @relation(fields: [clientId], references: [id])
  event     Event    @relation(fields: [eventId], references: [id])

  @@unique([eventId, clientId])
}

model Consultation {
  id            String             @id @default(cuid())
  clientId      String
  mentorId      String
  status        ConsultationStatus
  zoomLink      String?   
  slotId        String?
  // Fields baru
  rating        Int?              // Rating 1-5
  review        String?           // Review dari client
  cancelledAt   DateTime?         // Waktu pembatalan jika ada
  cancelReason  String?           // Alasan pembatalan
  lastMessageAt DateTime?         // Waktu pesan terakhir
  mentorNotes   String?           // Catatan mentor
  // Relations
  client        Client            @relation(fields: [clientId], references: [id])
  mentor        Mentor            @relation(fields: [mentorId], references: [id])
  slot          ConsultationSlot? @relation(fields: [slotId], references: [id])
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt        
  lastMessageId String?    @unique    
  isActive     Boolean    @default(true)  
  lastMessage   Message?   @relation("LastMessage", fields: [lastMessageId], references: [id])
  messages     Message[]  @relation("ConsultationMessages")

  @@index([clientId])
  @@index([mentorId])
  @@index([slotId])
  @@index([lastMessageAt])
}

model ConsultationSlot {
  id            String         @id @default(cuid())
  mentorId      String
  startTime     DateTime
  endTime       DateTime
  isBooked      Boolean        @default(false)
  // Fields baru
  duration      Int            // Durasi dalam menit
  maxBookings   Int            @default(1)  // Jumlah booking maksimal
  isRecurring   Boolean        @default(false)
  recurringDays Int[]          // [1,3,5] untuk Senin, Rabu, Jumat
  // Relations
  consultations Consultation[]
  mentor        Mentor         @relation(fields: [mentorId], references: [id])
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@index([mentorId])
}

model Message {
  id               String         @id @default(cuid())
  consultationId   String
  senderId        String
  content         String         @db.Text    
  type            MessageType    @default(TEXT)
  readAt          DateTime?    
  status          MessageStatus  @default(SENT)
  
  // Relations
  sender          User        @relation("MessageSender", fields: [senderId], references: [id])
  consultation    Consultation   @relation("ConsultationMessages", fields: [consultationId], references: [id], onDelete: Cascade)
  lastInConsultation Consultation? @relation("LastMessage")  // Perbaiki nama untuk konsistensi dengan Consultation
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  @@index([consultationId])
  @@index([senderId])
  @@index([createdAt])
  @@index([status])
}

model CareerAssessment {
  id             String   @id @default(cuid())
  clientId       String
  answers        Json
  geminiResponse String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  client         Client   @relation(fields: [clientId], references: [id])
  mentorRecommendations MentorRecommendation[]
}

model ClientMentor {
  id        String       @id @default(cuid())
  clientId  String
  mentorId  String
  status    ClientStatus
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  client    Client       @relation(fields: [clientId], references: [id])
  mentor    Mentor       @relation(fields: [mentorId], references: [id])

  @@unique([clientId, mentorId])
}

model MentorExpertise {
  id        String   @id @default(cuid())
  mentorId  String
  area      String   // Bidang keahlian (contoh: "Software Engineering", "Data Science", dll)
  level     Int      // Level keahlian (1-5)
  tags      String[] // Tag-tag terkait (contoh: ["python", "web development", "machine learning"])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  mentor    Mentor   @relation(fields: [mentorId], references: [id], onDelete: Cascade)

  @@index([mentorId])
  @@unique([mentorId, area])
}

model MentorRecommendation {
  id                 String   @id @default(cuid())
  clientId           String
  mentorId           String
  assessmentId       String
  matchingScore      Float    // Skor kesesuaian (0-100)
  matchingCriteria   Json     // Kriteria yang cocok dalam format JSON
  recommendedAt      DateTime @default(now())
  isViewed           Boolean  @default(false)
  client             Client   @relation(fields: [clientId], references: [id])
  mentor             Mentor   @relation(fields: [mentorId], references: [id])
  careerAssessment   CareerAssessment @relation(fields: [assessmentId], references: [id])

  @@index([clientId])
  @@index([mentorId])
  @@index([assessmentId])
  @@unique([clientId, mentorId, assessmentId])
}

enum MessageType {
  TEXT
  SYSTEM
}

enum ConsultationStatus {
  PENDING
  ACTIVE
  COMPLETED
  CANCELLED    // Status baru
}

enum Role {
  ADMIN
  MENTOR
  CLIENT
}

enum ClientStatus {
  NEW
  IN_PROGRESS
  COMPLETED
}

enum MentorStatus {
  ACTIVE
  INACTIVE
}

enum NotificationType {
  EVENT
  CONSULTATION
  CAREER_ASSESSMENT
  MENTOR_RECOMMENDATION
  OTHER
}

enum RecommendationStatus {
  PENDING
  ACCEPTED
  REJECTED
  EXPIRED
}

enum MessageStatus {
  SENT
  DELIVERED
  READ
}