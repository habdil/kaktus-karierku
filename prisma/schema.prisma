generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  password  String
  role      Role
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  admin     Admin?
  client    Client?
  mentor    Mentor?
}

model Client {
  id                 String              @id @default(cuid())
  userId             String              @unique
  fullName           String
  major              String?
  interests          String[]
  hobbies            String[]
  dreamJob           String?
  currentStatus      String?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  careerAssessments  CareerAssessment[]
  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  mentorRelations    ClientMentor[]
  consultations      Consultation[]
  eventRegistrations EventRegistration[]
}

model Mentor {
  id              String             @id @default(cuid())
  userId          String             @unique
  fullName        String
  phoneNumber     String
  education       String
  maritalStatus   String?
  company         String
  jobRole         String
  motivation      String?
  status          MentorStatus       @default(ACTIVE)
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  clientRelations ClientMentor[]
  consultations   Consultation[]
  availableSlots  ConsultationSlot[]
  user            User               @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Admin {
  id        String   @id @default(cuid())
  userId    String   @unique
  fullName  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  events    Event[]
}

model Event {
  id            String              @id @default(cuid())
  title         String
  description   String
  bannerUrl     String
  location      String
  date          DateTime
  url           String?
  adminId       String
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  admin         Admin               @relation(fields: [adminId], references: [id])
  registrations EventRegistration[]
}

model EventRegistration {
  id        String   @id @default(cuid())
  eventId   String
  clientId  String
  createdAt DateTime @default(now())
  client    Client   @relation(fields: [clientId], references: [id])
  event     Event    @relation(fields: [eventId], references: [id])

  @@unique([eventId, clientId])
}

model Consultation {
  id        String             @id @default(cuid())
  clientId  String
  mentorId  String
  status    ConsultationStatus
  zoomLink  String?
  slotId    String?
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  client    Client             @relation(fields: [clientId], references: [id])
  mentor    Mentor             @relation(fields: [mentorId], references: [id])
  slot      ConsultationSlot?  @relation(fields: [slotId], references: [id])
  messages  Message[]
}

model ConsultationSlot {
  id            String         @id @default(cuid())
  mentorId      String
  startTime     DateTime
  endTime       DateTime
  isBooked      Boolean        @default(false)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  consultations Consultation[]
  mentor        Mentor         @relation(fields: [mentorId], references: [id])
}

model Message {
  id             String       @id @default(cuid())
  consultationId String
  senderId       String
  content        String
  createdAt      DateTime     @default(now())
  consultation   Consultation @relation(fields: [consultationId], references: [id])
}

model CareerAssessment {
  id             String   @id @default(cuid())
  clientId       String
  answers        Json
  geminiResponse String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  client         Client   @relation(fields: [clientId], references: [id])
}

model ClientMentor {
  id        String       @id @default(cuid())
  clientId  String
  mentorId  String
  status    ClientStatus
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  client    Client       @relation(fields: [clientId], references: [id])
  mentor    Mentor       @relation(fields: [mentorId], references: [id])

  @@unique([clientId, mentorId])
}

enum Role {
  ADMIN
  MENTOR
  CLIENT
}

enum ConsultationStatus {
  PENDING
  ACTIVE
  COMPLETED
}

enum ClientStatus {
  NEW
  IN_PROGRESS
  COMPLETED
}

enum MentorStatus {
  ACTIVE
  INACTIVE
}
